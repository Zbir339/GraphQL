type Query {
    ## this are the queries you have
    ## !! this queries must have the same name in your controller and same returning type
    books: [Book]
    bookByName(name: String):Book
    authors: [AuthorDto]
    authorById(id: ID): AuthorDto
    getBooksPages(
        page: Int = 0,
        size: Int = 10,
        sortBy: String = "name",
        direction: SortDirection = ASC,
        filter: BookFilterInput
    ): [PaginatedBookResponse]
    #bookById(id: ID): Book
}
###type mutation
type Mutation {
    createBook(bookInput: BookInput): Book
    createAuthor(author: Author): AuthorDto
}

### this below are schemas
type Book {
    id: ID
    name: String
    price:Float
    description:String
    author: AuthorDto
}

input BookInput {
    name: String!
    price: Float!
    description: String
    authorId: ID!
}

input Author{
    name:String
    bornDate:String
}

type AuthorDto {
    id: ID
    name:String
    bornDate:String
}
##### this is the pagination schema and the query is up

type PaginatedBookResponse {
    content: [Book]  # Liste des livres de la page
    totalElements: Int  # Nombre total de livres
    totalPages: Int  # Nombre total de pages
    pageSize: Int  # Taille de la page
    currentPage: Int  # Page actuelle
}


input BookFilterInput {
    authorName: String
    minPrice: Float
    maxPrice: Float
    titleContains: String
}

enum SortDirection {
    ASC
    DESC
}
